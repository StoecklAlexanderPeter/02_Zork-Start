package ch.bbw.zork;import java.util.*;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling, 1.1, March 2000 * refactoring: Rinaldo Lanza, September 2020 */public class Game {		private Parser parser;	private Room currentRoom;	private Room spain, france, belgium, switzerland, germany, austria, czech, slovakia;	private ArrayList<Room> history;	private boolean finished;	private Backpack backpack;	private List<Room> rooms;	public Game() {				parser = new Parser(System.in);		spain = new Room("Spain");		france = new Room("France");		belgium = new Room("Belgium");		switzerland = new Room("Switzerland");		germany = new Room("Germany");		austria = new Room("Austria");		czech = new Room("Czech");		slovakia = new Room("Slovakia");		this.spain.setExits(null, null, null, france);		this.france.setExits(belgium, switzerland, null, spain);		this.belgium.setExits(null, germany, france, null);		this.switzerland.setExits(germany, austria, null, france);		this.germany.setExits(null, czech, switzerland, belgium);		this.austria.setExits(czech, slovakia, null, switzerland);		this.czech.setExits(null, null, austria, germany);		this.slovakia.setExits(null, null, null, austria);		this.czech.setWon(true);		this.germany.addItem(new Item(10, "JÃ¤germeister"));		this.germany.addItem(new Item(15, "Berliner Luft"));		this.france.addItem(new Item(20, "Brandy"));		this.switzerland.addItem(new Item(18, "Schnaps"));		this.slovakia.addItem(new Item(32, "Raki"));		this.backpack = new Backpack(50);		currentRoom = switzerland; // start game in switzerland		this.rooms = Arrays.asList(spain, france, belgium, switzerland, germany, austria, czech, slovakia);	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		this.history = new ArrayList<Room>();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		while (!this.finished) {			Command command = parser.getCommand(null);			this.finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			if (goRoom(command)) {				System.out.println("Congratulations you won");				return true;			}		} else if (commandWord.equals("take")) {			if(this.takeItem(command)) {				System.out.println("Item picked up");			} else {				System.out.println("To much weight on you");			}		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		} else if (commandWord.equals("show")) {			currentRoom.showItems();		} else if (commandWord.equals("backpack")) {			this.backpack.getContent();		} else if(commandWord.equals("give")) {			if(this.removeItem(command)) {				System.out.println("Item removed");			} else {				System.out.println("Give back what");			}		} else if (commandWord.equals("back")) {			this.goBack();		} else if (commandWord.equals("map")) {			this.map();		}		return false;	}	private boolean takeItem(Command command) {		if (command.hasSecondWord()) {			String string = command.getSecondWord();			int index = Integer.parseInt(command.getSecondWord());			return this.backpack.addItem(currentRoom.takeItem(index));		} else {			return false;		}	}	private boolean removeItem(Command command) {		if (command.hasSecondWord()) {			String string = command.getSecondWord();			int index = Integer.parseInt(command.getSecondWord());			this.currentRoom.addItem(this.backpack.getItem(index));			this.backpack.removeItem(index);			return true;		} else {			return false;		}	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("Current Location: " + this.currentRoom.shortDescription());		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private boolean goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				this.addHistory(currentRoom);				if (currentRoom.getWon()) {					System.out.println(currentRoom.longDescription());					return true;				} else {					System.out.println(currentRoom.longDescription());				}			}		}		return false;	}	public void addHistory(Room room) {		this.history.add(room);	}	public void goBack() {		if (history.size() != 0) {			this.currentRoom = this.history.get(this.history.size()-1);			System.out.println(currentRoom.longDescription());			this.history.remove(this.history.size()-1);		} else {			System.out.println("Please go somewhere first, to go back");		}	}	public void map() {		this.rooms.forEach(room -> {			System.out.print(room.shortDescription());			if (room.equals(currentRoom)) {				System.out.print(" <- I'm Here");			}			System.out.println();			room.showItems();		});	}}